language: go

# Only the last two Go releases are supported by the Go team with security
# updates. Any versions older than that should be considered deprecated.
# Don't bother testing with them. tip builds your code with the latest
# development version of Go. This can warn you that your code will break
# in the next version of Go. Don't worry! Later we declare that test runs
# are allowed to fail on Go tip.
go:
  - 1.7
  - 1.8
  - tip

# Skip the install step. Don't `go get` dependencies. Only build with the
# code in vendor/
install:
  - go get github.com/gorilla/handlers
  - go get github.com/gorilla/mux
  - go get github.com/Luzifer/rconfig
  - go get github.com/flosch/pongo2
  - go get golang.org/x/tools/cmd/cover
  - go get github.com/mattn/goveralls
  - go get github.com/go-playground/overalls

matrix:
  # It's ok if our code fails on unstable development versions of Go.
  allow_failures:
    - go: tip
  # Don't wait for tip tests to finish. Mark the test run green if the
  # tests pass on the stable versions of Go.
  fast_finish: true

# Don't email me the results of the test runs.
notifications:
  email: false

# Anything in before_script: that returns a nonzero exit code will
# flunk the build and immediately stop. It's sorta like having
# set -e enabled in bash.
before_script:
  - GO_FILES=$(find . -iname '*.go' | grep -v /vendor/)  # All the .go files, excluding vendor/
  - PKGS=$(go list ./... | grep -v /vendor/)             # All the import paths, excluding vendor/
  - go get github.com/golang/lint/golint                 # Linter
  - go get honnef.co/go/tools/cmd/megacheck              # Badass static analyzer/linter

# script always run to completion (set +e). All of these code checks are must haves
# in a modern Go project.
script:
  - test -z $(gofmt -s -l $GO_FILES)  # Fail if a .go file hasn't been formatted with gofmt
  - go test -v -race $PKGS -cover     # Run all the tests with the race detector enabled
  - overalls -project=github.com/xiaosongluo/dashboard -covermode=count -ignore=.git,vendor -debug
  - goveralls -coverprofile=overalls.coverprofile -service=travis-ci
#  - go vet $PKGS                      # go vet is the official Go static analyzer
#  - megacheck $PKGS                   # "go vet on steroids" + linter
#  - golint -set_exit_status $PKGS     # one last linter

env:
  global:
    secure: "WGIAFZSbd4liybWCfZIBZ17UZ+2xqbCUjhr6oeqR+ymd8sEdSN8LoNdTS0LTPL9o4L50JPHImkNUrhot9rRyMxnjlO2aEGWzxqSyiL0b1BD/ZDpXT1dsCCy8GgnEb52wxgJzPrDnZGf9grHSobhjQv9wB5hu7ubNwYhulG/PQ0pwgTjSa0Vz8pYsGZJLzOiz8A5hmFmnil/xH7Cp/fff1QLYT4hW5WUFfQFR/ibE3tAoPALP13zRofJfLQ5aaT+KqXw43wCJiqzsbtc30KgiaQqaKfAH8TtkcfHjEGZQb9D9dJ88AWxH6hw5xrbTx8ZIK68yU4yJ0c/IeUni8F9V501An9n36MmT7N6ixjUQACg2KQQ5k6oRIVhxaYnZHolv3mCKCMKLntVvPbKxbl5kRPcXQW6uwf7UIgpOerw4/pJ+hFQA8I4CU/bwmQSnkVmOVirKr24Rxvtv1m/3n9x5fp41wVhsLF/XAXgZjwov9DeLYJOXcdWF7L6TXJbEYXaSpGycWkuvapcd8XvXQihcSnqlB5ut8Yfxl+9um2B0egIYxZGXJai/M1hOPibr7eZJyj/KaXNQpHErYb4LwsiJy/vdERVBPuPxC4bc22Mm5TTZFX3bBgKo71SscAVqY6xGQv1Ny1XU1Xx3OGp74JAV49TVhP6WeHrj+YG6sJFzuW8="